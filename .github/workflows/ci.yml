name: ci
on:
  pull_request:
    paths:
      # NOTE: keep these paths in sync with the paths that trigger the
      # fuzzydata Github Actions in .github/workflows/fuzzydata-test.yml
      - .github/workflows/**
      - .github/actions/**
      - '!.github/workflows/push-to-main.yml'
      - asv_bench/**
      - modin/**
      - requirements/**
      - scripts/**
      - environment-dev.yml
      - requirements-dev.txt
      - setup.cfg
      - setup.py
      - versioneer.py
  push:
  schedule:
    - cron: "30 2 * * WED"
    - cron: "30 2 * * THU"
concurrency:
  # Cancel other jobs in the same branch. We don't care whether CI passes
  # on old commits.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
env:
  MODIN_GITHUB_CI: true

jobs:

  test-all:
    needs: []
    strategy:
      matrix:
        os:
          - windows
        python-version: [ "${{ needs.python-filter.outputs.python-version }}" ]
        # On push, run the tests for all engines. Otherwise, for pull requests,
        # only run tests for engines that depend on files changed in this PR.
        engine:
          - native
        test_task:
          - group_1
          - group_2
          - group_3
          - group_4
        exclude: # python and native engines only have one task group that contains all the tests
          - engine: "python"
            test_task: "group_2"
          - engine: "native"
            test_task: "group_2"
          - engine: "python"
            test_task: "group_3"
          - engine: "native"
            test_task: "group_3"
          - engine: "python"
            test_task: "group_4"
          - engine: "native"
            test_task: "group_4"
    runs-on: ${{ matrix.os }}-latest
    defaults:
      run:
        shell: bash -l {0}
    env:
      MODIN_ENGINE: ${{matrix.engine}}
      # Only test reading from SQL server and postgres on ubuntu for now.
      # Eventually, we should test on Windows, too, but we will have to set up
      # the servers differently.
      MODIN_TEST_READ_FROM_SQL_SERVER: ${{ matrix.os == 'ubuntu' }}
      MODIN_TEST_READ_FROM_POSTGRES: ${{ matrix.os == 'ubuntu' }}
    name: test-${{ matrix.os }} (engine ${{matrix.engine}}, python ${{matrix.python-version}}, ${{matrix.test_task}})
    services:
      # Using workaround https://github.com/actions/runner/issues/822#issuecomment-1524826092
      moto:
        # we only need moto service on Ubuntu and for group_4 task, or for native or python engine.
        image: ${{ (matrix.os == 'ubuntu' && (matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4')) && 'motoserver/moto:5.0.13' || '' }}
        ports:
          - 5000:5000
        env:
          AWS_ACCESS_KEY_ID: foobar_key
          AWS_SECRET_ACCESS_KEY: foobar_secret
    steps:
      - name: Set native storage format
        run: echo "MODIN_STORAGE_FORMAT=Native" >> $GITHUB_ENV
        if: matrix.engine == 'native'
      - name: Limit ray memory
        run: echo "MODIN_MEMORY=1000000000" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu' && matrix.engine == 'ray'
      - name: Tell Modin to use existing ray cluster
        run: echo "MODIN_RAY_CLUSTER=True" >> $GITHUB_ENV
        if: matrix.os == 'windows' && matrix.engine == 'ray'
      - uses: actions/checkout@v4
      - uses: ./.github/actions/mamba-env
        with:
          environment-file: environment-dev.yml
          python-version: ${{matrix.python-version}}
      - name: Start local ray cluster
        # Try a few times to start ray to work around
        # https://github.com/modin-project/modin/issues/4562
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: ray start --head --port=6379 --object-store-memory=1000000000
        if: matrix.os == 'windows' && matrix.engine == 'ray'
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
        if: matrix.os == 'ubuntu'
      - name: Set up postgres
        # Locally, specifying port 2345:5432 works, but 2345:2345 and 5432:5432 do not. This solution is from
        # https://stackoverflow.com/questions/36415654/cant-connect-docker-postgresql-9-3
        run: |
          sudo docker pull postgres
          sudo docker run --name some-postgres -e POSTGRES_USER=sa -e POSTGRES_PASSWORD=Strong.Pwd-123 -e POSTGRES_DB=postgres -d -p 2345:5432 postgres
        if: matrix.os == 'ubuntu'

    # BEGIN partitioned execution tests. We run these tests along with group 1,
    # or if we are on the "python" engine, which only has a single group. We
    # skip these tests on the "native" engine, which does not use partitions.

      # - run: python -m pytest modin/tests/pandas/internals/test_benchmark_mode.py
      #   if: matrix.engine != 'native' && (matrix.engine == 'python' || matrix.test_task == 'group_1')
      # - run: python -m pytest modin/tests/test_partition_api.py
      #   # Skip this test for python because we do not define unwrap_partitions()
      #   # for python execution.
      #   if: matrix.engine != 'native' && matrix.engine != 'python' && matrix.test_task == 'group_1'
      # - name: xgboost tests
      #   run: |
      #     # TODO(https://github.com/modin-project/modin/issues/5194): Uncap xgboost
      #     # when we use collective instead of rabit.
      #     mamba install "xgboost>=1.7.1,<2.0.0" scikit-learn -c conda-forge
      #     python -m pytest -n 2 \
      #             modin/tests/experimental/xgboost/test_default.py \
      #             modin/tests/experimental/xgboost/test_xgboost.py \
      #             modin/tests/experimental/xgboost/test_dmatrix.py
      #   if: matrix.engine != 'native' && matrix.os != 'windows' && (matrix.engine == 'python' || matrix.test_task == 'group_1')
      # - run: python -m pytest -n 2 modin/tests/experimental/test_pipeline.py
      #   if: matrix.engine != 'native'  && (matrix.engine == 'python' || matrix.test_task == 'group_1')


    # END partitioned execution tests.


    # BEGIN test groups.
    # Run all the tests in the corresponding group for this instance of the
    # test matrix. For example, if we are in the matrix's 'group_4', run the
    # tests for 'group_4'. For each of 'native' and 'python' engines,  we run
    # all tests in a single job, so we ignore the grouping.

      # - uses: ./.github/actions/run-core-tests/group_1
      #   with:
      #     # When running with Ray engine on Windows using 2 pytest workers tests are failing in CI.
      #     # See https://github.com/modin-project/modin/issues/7387.
      #     parallel: ${{ matrix.engine == 'ray' && matrix.os == 'windows' && '-n 1' || '-n 2' }}
      #   if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_1'
      # - uses: ./.github/actions/run-core-tests/group_2
      #   with:
      #     # When running with Ray engine on Windows using 2 pytest workers tests are failing in CI.
      #     # See https://github.com/modin-project/modin/issues/7387.
      #     parallel: ${{ matrix.engine == 'ray' && matrix.os == 'windows' && '-n 1' || '-n 2' }}
      #   if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_2'
      # - uses: ./.github/actions/run-core-tests/group_3
      #   with:
      #     # When running with Ray engine on Windows using 2 pytest workers tests are failing in CI.
      #     # See https://github.com/modin-project/modin/issues/7387.
      #     parallel: ${{ matrix.engine == 'ray' && matrix.os == 'windows' && '-n 1' || '-n 2' }}
      #   if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_3'
      # - uses: ./.github/actions/run-core-tests/group_4
      #   with:
      #     # When running with Ray engine on Windows using 2 pytest workers tests are failing in CI.
      #     # See https://github.com/modin-project/modin/issues/7387.
      #     parallel: ${{ matrix.engine == 'ray' && matrix.os == 'windows' && '-n 1' || '-n 2' }}
      #   if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4'
      # - run: python -m pytest -n 2 modin/tests/numpy
      #   # Native execution does not support the modin Numpy API.
      #   if: matrix.engine == 'python' || matrix.test_task == 'group_4'

    # END test groups.


    # BEGIN some tests that we run along with group 4 for engines other than
    # 'native' and 'python'. 'native' and 'python' jobs will run these tests
    # along with all other tests in a single group.

      - run: chmod +x ./.github/workflows/sql_server/set_up_sql_server.sh
        if: matrix.os == 'ubuntu' && (matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4')
      - run: ./.github/workflows/sql_server/set_up_sql_server.sh
        if: matrix.os == 'ubuntu' && (matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4')
      # Do not add parallelism (`-n` argument) here - it will cause mock S3 service to fail.
      - run: python -m pytest modin/tests/pandas/test_io.py --verbose
        timeout-minutes: 60
        if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4'
      - run: python -m pytest modin/tests/experimental/test_io_exp.py
        if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4'
      - run: python -m pytest modin/tests/interchange/dataframe_protocol/test_general.py
        if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4'
      - run: python -m pytest modin/tests/interchange/dataframe_protocol/pandas/test_protocol.py
        if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4'
      - run: python -m pytest modin/tests/polars/test_dataframe.py
      - run: |
          python -m pip install lazy_import
          python -m pytest modin/tests/pandas/integrations/
        if: matrix.engine == 'python' || matrix.engine == 'native' || matrix.test_task == 'group_4'


    # END tests that run on group 4, or in the single group for 'native' and
    # python' engines.

      - uses: ./.github/actions/upload-coverage
      - name: Stop local ray cluster
        run: ray stop
        if: matrix.os == 'windows' && matrix.engine == 'ray'

