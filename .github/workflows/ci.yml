name: ci
on: pull_request
jobs:
  lint-commit:
    name: lint (commit)
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v1
        with:
          node-version: "10.x"
      - run: npm install --save-dev @commitlint/{config-conventional,cli} commitlint-plugin-jira-rules commitlint-config-jira
      - name: Add dependencies for commitlint action
        run: echo "::set-env name=NODE_PATH::$GITHUB_WORKSPACE/node_modules"
      - run: git remote add upstream https://github.com/modin-project/modin.git
      - run: git fetch upstream
      - run: npx commitlint --from upstream/master --to HEAD --verbose

  lint-black:
    name: lint (black)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7.x"
          architecture: "x64"
      - run: pip install black
      - run: black --check --diff modin/

  lint-flake8:
    name: lint (flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7.x"
          architecture: "x64"
      - run: pip install flake8 flake8-print
      - run: flake8 --enable=T modin

  prepare-cache:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest",  "windows-latest"]
        python-version: ["3.6", "3.7", "3.8"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip if Ubuntu
        if: startsWith(runner.os, 'Linux')
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - name: Cache pip if Windows
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v1
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
          architecture: "x64"
      - run: pip install ray==0.8.7

  test-api:
    needs: prepare-cache
    runs-on: ubuntu-latest
    name: test api
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.7-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: 3.7
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        # `shell: bash -l {0}` - special way to activate modin environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - run: sudo apt update && sudo apt install -y libhdf5-dev
      - name: Api tests
        shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_api.py
      - name: Backends Api tests
        shell: bash -l {0}
        run: python -m pytest modin/test/test_backends_api.py

  test-headers:
    needs: prepare-cache
    runs-on: ubuntu-latest
    name: test-headers
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.6-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: 3.6
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Headers tests
        shell: bash -l {0}
        run: python -m pytest modin/test/test_headers.py

  test-internals:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    name: test-internals
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.6-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: 3.6
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Internals tests
        shell: bash -l {0}
        run: python -m pytest modin/test/test_publisher.py modin/data_management/factories/test/test_dispatcher.py modin/experimental/cloud/test/test_cloud.py

  test-defaults:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [BaseOnPython]
    env:
      MODIN_MEMORY: 1000000000
      MODIN_TEST_DATASET_SIZE: "small"
    name: Test ${{ matrix.backend }} backend, Python 3.6
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.6-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: 3.6
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_binary.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_default.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_indexing.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_iter.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_join_sort.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_map_metadata.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_reduction.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_udf.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_window.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_series.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_rolling.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_concat.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_groupby.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_reshape.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_general.py --backend=${{ matrix.backend }}
      - shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash)

  test-omnisci:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    env:
      MODIN_MEMORY: 1000000000
      MODIN_EXPERIMENTAL: "True"
      MODIN_ENGINE: "ray"
      MODIN_BACKEND: "omnisci"
    name: Test OmniSci backend, Python 3.7
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.7-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - name: Setting up Modin environment
        uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin_on_omnisci
          python-version: 3.7.8
          environment-file: requirements/env_omnisci.yml
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
      - shell: bash -l {0}
        run: pytest modin/experimental/engines/omnisci_on_ray/test/test_dataframe.py
      - shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash)
  
  test-all:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8"]
        engine: ["python", "ray", "dask"]
    env:
      MODIN_ENGINE: ${{matrix.engine}}
      MODIN_MEMORY: 1000000000
    name: test-ubuntu (engine ${{matrix.engine}}, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - name: Install HDF5
        run: sudo apt update && sudo apt install -y libhdf5-dev
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_binary.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_default.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_indexing.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_iter.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_join_sort.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_map_metadata.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_reduction.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_udf.py
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_window.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_series.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_rolling.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_concat.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_groupby.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_reshape.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_general.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_io.py
      - shell: bash -l {0}
        run: python -m pytest modin/experimental/pandas/test/test_io_exp.py
      - shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash)

  test-experimental:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    env:
      MODIN_ENGINE: "python"
      MODIN_EXPERIMENTAL: "True"
      MODIN_MEMORY: 1000000000
    name: test experimental
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.7-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: 3.7
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/dataframe/test_map_metadata.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_series.py
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_io.py
      - shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash)

  test-cloud:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    env:
      MODIN_ENGINE: "python"
      MODIN_EXPERIMENTAL: "True"
      MODIN_MEMORY: 1000000000
    name: test cloud
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-3.7-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: 3.7
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - shell: bash -l {0}
        run: python -m pytest --simulate-cloud=normal modin/pandas/test/test_io.py::test_from_csv
      - shell: bash -l {0}
        run: bash <(curl -s https://codecov.io/bash)

  test-windows:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8"]
        engine: ["ray", "dask"]
        part: ["DataFrame", 3]
    env:
      MODIN_ENGINE: ${{matrix.engine}}
      MODIN_MEMORY: 1000000000
    name: test-windows
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          auto-update-conda: true # this enable `use-only-tar-bz2` feature on Windows
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_binary.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_default.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_indexing.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_iter.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_join_sort.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_map_metadata.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_reduction.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_udf.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: pytest modin/pandas/test/dataframe/test_window.py
        if: matrix.part == 'DataFrame'
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_series.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_rolling.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_concat.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_groupby.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_reshape.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_general.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_io.py
        if: matrix.part == 3
      - shell: bash -l {0}
        run: choco install codecov
      - shell: bash -l {0}
        run: codecov -f ./coverage.xml

  test-pyarrow:
    needs: [lint-commit, lint-flake8, lint-black, test-api, test-headers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8"]
    env:
      MODIN_BACKEND: pyarrow
      MODIN_EXPERIMENTAL: "True"
    name: test (pyarrow, python ${{matrix.python-version}})
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ github.run_id }}-${{ hashFiles('environment.yml') }}
      - uses: goanpeca/setup-miniconda@v1.6.0
        with:
          activate-environment: modin
          environment-file: environment.yml
          python-version: ${{matrix.python-version}}
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Conda environment
        shell: bash -l {0}
        run: |
          conda info
          conda list
      - run: sudo apt update && sudo apt install -y libhdf5-dev
      - shell: bash -l {0}
        run: python -m pytest modin/pandas/test/test_io.py::test_from_csv
