name: ci-notebooks
on:
  pull_request:
    paths:
      - modin/**
      - examples/tutorial/**
      - .github/workflows/ci-notebooks.yml
      - setup.cfg
      - setup.py
jobs:
  test-tutorial-notebooks:
    defaults:
      run:
        shell: bash -l {0}
    name: test tutorial notebooks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        execution: [pandas_on_ray, pandas_on_dask, omnisci_on_native]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8.x"
          architecture: "x64"
        if: matrix.execution != 'omnisci_on_native'
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key:
            ${{ runner.os }}-conda-${{ hashFiles('requirements/env_omnisci.yml') }}
        if: matrix.execution == 'omnisci_on_native'
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          activate-environment: modin_on_omnisci
          environment-file: requirements/env_omnisci.yml
          python-version: 3.8
          channel-priority: strict
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
        if: matrix.execution == 'omnisci_on_native'
      - name: Cache datasets
        uses: actions/cache@v2
        with:
          path: taxi.csv
          # update cache only if notebooks require it to be changed
          key: hashFiles("examples/tutorial/jupyter/**")
      # replace modin with . in the tutorial requirements file for `pandas_on_ray` and
      # `pandas_on_dask` since we need Modin built from sources
      - run: sed -i 's/modin/./g' examples/tutorial/jupyter/execution/${{ matrix.execution }}/requirements.txt
        if: matrix.execution != 'omnisci_on_native'
      # install dependencies required for notebooks execution for `pandas_on_ray` and `pandas_on_dask`
      - run: pip install -r examples/tutorial/jupyter/execution/${{ matrix.execution }}/requirements.txt
        if: matrix.execution != 'omnisci_on_native'
      # Build Modin from sources for `omnisci_on_native`
      - run: pip install .
        if: matrix.execution == 'omnisci_on_native'
      # install test dependencies
      # TODO: remove pin when flake8 5.x stabilizes and appears in both pip and conda-forge; see GH-#4745
      - run: pip install pytest pytest-cov black "flake8<5" flake8-print flake8-no-implicit-concat
        if: matrix.execution != 'omnisci_on_native'
      - run: pip install flake8-print jupyter nbformat nbconvert
        if: matrix.execution == 'omnisci_on_native'
      - run: pip list
        if: matrix.execution != 'omnisci_on_native'
      - run: |
          conda info
          conda list
        if: matrix.execution == 'omnisci_on_native'
      - run: |
          black --check --diff examples/tutorial/jupyter/execution/${{ matrix.execution }}/test/test_notebooks.py
          black --check --diff examples/tutorial/jupyter/execution/test/utils.py
      - run: |
          flake8 --enable=T examples/tutorial/jupyter/execution/${{ matrix.execution }}/test/test_notebooks.py
          flake8 --enable=T examples/tutorial/jupyter/execution/test/utils.py
      - run: pytest examples/tutorial/jupyter/execution/${{ matrix.execution }}/test/test_notebooks.py
